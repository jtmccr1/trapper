{"version":3,"sources":["images/logo.png","components/Header.js","lib/outbreak/Case.js","lib/outbreak/Link.js","utils/commonFunctions.js","lib/charts/stackedHistogram.js","components/StackedHistogram.js","components/PhyloChart.js","components/ObjectChart.js","components/ArcTransmission.js","components/ChartContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","href","target","rel","src","logo","alt","width","style","fontSize","Case","data","keyMap","arguments","length","undefined","Map","Object","classCallCheck","this","dataMap","concat","toConsumableArray","DEFAULT_MAP","symptomOnset","get","sampleDate","resolution","resoultionDate","id","location","caseId","Symbol","metadata","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","keys","filter","k","values","indexOf","iterator","next","done","key","value","err","return","Date","valueOf","map","d","resolutionDate","Link","source","dataSource","dateParse","timeParse","stackedHistogramChart","svg","layout","margins","settings","objectSpread","DEFAULT_SETTINGS","createClass","hoverBorder","backgroundBorder","baubles","transitionDuration","height","_this","getBoundingClientRect","select","remove","append","attr","left","top","svgSelection","xScale","scaleTime","domain","horizontalRange","range","right","yScale","scaleLinear","verticalRange","bottom","scales","x","y","axesLayer","call","axisBottom","axisLeft","bins","updateCallback","update","transition","duration","ease","easeLinear","ticks","_this3","rects","selectAll","c","enter","v","join","x0","Math","max","x1","y1","y0","exit","_this2","action","selection","selected","console","log","on","i","n","stackedHistogramLayout","_horizontalRange","_verticalRange","groupingFunction","binnedFunction","timeWeek","floor","keyToXFunction","offset","_this4","dateBins","nest","entries","groupKeys","reduce","acc","curr","push","currentCount","maxCount","time","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","kEntry","w","entry","colorKey","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","caseEntry","_iterator2","min","StackedHistogram","props","_useState","useState","_useState2","slicedToArray","histogram","setHistogram","el","useCallback","node","children","chartGeom","spaceTop","fig","draw","callback","classed","onHover","rand_id","random","toString","substring","ref","PhyloChart","figtree","setFigtree","phylogeny","FigTree","CircleBauble","hilightInternalNodes","hilightExternalNodes","hilightBranches","onClickNode","React","forwardRef","ArcTransmission","xfunc","ArcLayout","graph","xFunction","curve","ChartContainer","prefix","ogLineList","setOgLineList","_useState3","_useState4","ogLinks","setOgLinks","_useState5","_useState6","setScales","_useState7","_useState8","setChartGeom","_useState9","_useState10","domRect","setDomRect","_useState11","_useState12","outbreakGraph","setOutbreakGraph","_useState13","_useState14","setPhylogeny","_useState15","_useState16","phyloAttributes","setPhyloAttributes","_useState17","_useState18","dateRange","setDateRange","useEffect","csv","dataPoint","Location","Outcome","then","Promise","all","_ref","_ref2","data1","data2","fetch","response","text","Tree","parseNewick","json","nestLinks","dataSources","forEach","l","links","totalObservations","ds","_dataSources","_i","s","metaData","support","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","sources","cases","_loop2","newCase","Graph","startWeek","getSymptomOnset","endWeek","spaceLeft","spaceRight","spaceBottom","weeks","parentBaseDim","casesRange","extent","nodes","treeMaxTipLength","rootToTipLength","treeMaxTip","find","treeMaxDate","getNode","name","treeRootDate","timeYear","rootNode","measuredRef","handleResize","window","addEventListener","removeEventListener","every","components_StackedHistogram","callbacks","groups","components_ArcTransmission","components_PhyloChart","TransmissionLayout","attributes","RectangularLayout","App","components_Header","components_ChartContainer","Boolean","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb39f785.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e67d1199.png\";","import React from 'react';\nimport logo from '../images/logo.png';\nfunction Header() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<div className=\"logo\">\n\t\t\t\t\t<a href=\"http://artic.network\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t<img src={logo} alt={'logo'} width=\"132\" />\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"title\">\n\t\t\t\t<h2 >\n\t\t\t\t  <div style={{fontSize: \"1.8em\"}}>TRAPPER</div>\n\t\t\t\t\t<div>Transmission Reconstuction And Phylogenetics Promoting Early Response</div>\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t);\n}\n\nexport default Header;\n","class Case{\n    /** \n    * A class to hold data for each case. 'case' is a special word in javascript so we spell it with a k.\n    * This class is intended to formalize the data format for each case. The constructor also takes a map which maps   * keys in the incoming object to those in the Case object. Required values in the map and their types are  \n    *   symptomOnset     the date of first contact\n    *   sampleDate       an array of dates\n    *   resolution       The resolution of the case\n    *   resolutionDate   The date of resolution\n    * Any incoming keys not mentioned in the dataMap are put in a metadata entry. If the required keys\n    */\n     /**\n    * The constructor\n    * @param data             an object with the following keys. Any other keys will be added to a metadata entry\n    * @param keyMap          a map that maps incoming keys to the required entries above. The defualt assumes the    keys===the entry names. Any entries not provided will be taken from the defualt.\n    *\n    */\n    \n    static DEFAULT_MAP() {\n          return new Map([\n                  ['symptomOnset','symptomOnset'],\n                  ['sampleDate','sampleDate'],\n                  ['resolution','resolution'],\n                  ['resolutionDate','resolutionDate'],\n                  ['id','id'],\n                  ['location','location'] \n                ]);\n      }\n    constructor(data,keyMap=new Map()){\n      const dataMap = new Map([...Case.DEFAULT_MAP(),...keyMap])   \n      \n      this.symptomOnset = data[dataMap.get('symptomOnset')]? data[dataMap.get('symptomOnset')] :\"Unknown\";\n      this.sampleDate = data[dataMap.get('sampleDate')]?data[dataMap.get('sampleDate')]:\"Unknown\";\n      this.resolution = data[dataMap.get('resolution')]?data[dataMap.get('resolution')]:\"Unknown\";\n      this.resoultionDate = data[dataMap.get('resolutionDate')]?data[dataMap.get('resolutionDate')]:\"Unknown\";\n      this.id=data[dataMap.get('id')]?data[dataMap.get('id')]:\"Unknown\";\n      this.location = data[dataMap.get('location')]?data[dataMap.get('location')]:\"Unknown\";\n      this.caseId =  Symbol();\n      \n      this.metadata={};\n      for(const key of Object.keys(data).filter(k=>[...dataMap.values()].indexOf(k)===-1)){ \n          \n          this.metadata[key]=data[key];\n       }\n    }\n    \n    /**\n    * Returns a copy of the date of symptomOnset\n    */\n    getSymptomOnset(){\n     return new Date(this.symptomOnset.valueOf());\n    }\n    \n     /**\n    * Returns a copy of the sample dates \n    */\n    getSampleDate(){\n     return this.sampleDate.map(d=>new Date(d.valueOf()));\n    }\n    \n     /**\n    * Returns a copy of the date of symptomOnset\n    */\n    getResolution(){\n     return this.resolution;\n    }\n    \n    /**\n    * Returns a copy of the resolution date\n    */\n    getResolutionDate(){\n     return new Date(this.resolutionDate.valueOf());\n    }\n    /**\n    * Returns a copy of the case id\n    */\n    getId(){\n      return this.id;\n    }\n      /**\n    * Returns a copy of the unique caseId\n    */\n    getCaseId(){\n      return this.caseId;\n    }\n    \n    /**\n    * Returns a copy of the location\n    */\n    getLocation(){\n      return this.location;\n    }\n    \n  }\n  export default Case;","class Link{\n    /** \n    * A class to hold data for each link. \n    * This class is intended to formalize the data format for each case. The constructor also takes a map which maps   * keys in the incoming object to those in the Link object. Required values in the map and their types are  \n    *   target           the id of the first contact\n    *   source              the id of the source\n\n    * Any incoming keys not mentioned in the dataMap are put in a metadata entry. If the required keys\n    */\n     /**\n    * The constructor\n    * @param data             an object with the following keys. Any other keys will be added to a metadata entry\n    * @param keyMap          a map that maps incoming keys to the required entries above. The defualt assumes the    keys===the entry names. Any entries not provided will be taken from the defualt.\n    *\n    */\n    \n    static DEFAULT_MAP() {\n          return new Map([\n                  ['target','target'],\n                  ['source','source'],\n                  ['dataSource','dataSource'],\n                ]);\n      }\n    constructor(data,keyMap=new Map()){\n      const dataMap = new Map([...Link.DEFAULT_MAP(),...keyMap])   \n      \n      this.target = data[dataMap.get('target')]? data[dataMap.get('target')] :\"Unknown\";\n      this.source = data[dataMap.get('source')]?data[dataMap.get('source')]:\"Unknown\";      \n      this.dataSource=data[dataMap.get('dataSource')]?data[dataMap.get('dataSource')]:\"Unknown\";\n      this.metadata={};\n      for(const key of Object.keys(data).filter(k=>[...dataMap.values()].indexOf(k)===-1)){ \n          this.metadata[key]=data[key];\n       }\n    }\n    \n   \n    \n  }\n  export default Link;","import{timeParse} from \"d3-time-format\";\nexport const dateParse = timeParse(\"%Y-%m-%d\");\n","import {axisLeft, axisBottom} from \"d3-axis\";\nimport {select,selectAll} from \"d3-selection\";\nimport {scaleLinear,scaleTime} from \"d3-scale\";\nimport {easeLinear} from \"d3-ease\";\nimport {max,min} from \"d3-array\";\nimport {nest} from \"d3-collection\";\nimport {timeWeek} from \"d3-time\"\nimport {transition} from \"d3-transition\"\n\nexport class stackedHistogramChart{\n  static DEFAULT_SETTINGS() {\n        return {\n      hoverBorder: 2,\n      backgroundBorder: 0,\n      baubles: [],\n      transitionDuration:500,\n        }\n      }\n      /**\n       * The constructor\n       * @param {*} svg \n       * @param {*} layout \n       * @param {*} margins top,bottom,left,right\n       * @param {*} settings \n       */\n    constructor(svg, layout, margins, settings = {}){\n      this.layout = layout;\n      this.margins = margins;\n\n      // merge the default settings with the supplied settings\n      this.settings = {...stackedHistogramChart.DEFAULT_SETTINGS(), ...settings};\n      this.svg=svg;\n      }\n    \n    draw(){\n       // get the size of the svg we are drawing on\n       let width,height;\n       if(Object.keys(this.settings).indexOf(\"width\")>-1){\n           width =this. settings.width;\n       }else{\n           width = this.svg.getBoundingClientRect().width;\n       }\n       if(Object.keys(this.settings).indexOf(\"height\")>-1){\n           height =this.settings.height;\n       }else{\n           height = this.svg.getBoundingClientRect().height;\n       }\n\n       //remove the tree if it is there already\n       select(this.svg).select(\"g\").remove();\n\n       // add a group which will contain the new plot\n       select(this.svg).append(\"g\")\n           .attr(\"transform\",`translate(${this.margins.left},${this.margins.top})`);\n\n        //to selecting every time\n        this.svgSelection = select(this.svg).select(\"g\");\n\n        this.svgSelection.append(\"g\").attr(\"class\", \"axes-layer\");\n        if (this.settings.backgroundBorder > 0) {\n            this.svgSelection.append(\"g\").attr(\"class\", \"rect-background-layer\");\n        }\n        this.svgSelection.append(\"g\").attr(\"class\", \"rect-layer\");\n        // create the scales\n        const xScale = scaleTime()\n        .domain(this.layout.horizontalRange)\n        .range([this.margins.left, width - this.margins.right-this.margins.left]);\n        //height is total \n        const yScale = scaleLinear()\n            .domain(this.layout.verticalRange)\n            .range([height -this.margins.bottom-this.margins.top,this.margins.top]);\n\n        this.scales = {x:xScale, y:yScale, width, height};\n        addAxis.call(this, this.margins);\n\n        this.bins=[]; \n        // Called whenever the layout changes...\n          this.layout.updateCallback = () => {\n                this.update();\n            }\n    \n            this.update();\n        }\n\n        update(){\n        // get new positions\n        this.bins = []; // rest to so will be filled\n        this.layout.layout(this.bins);\n        // svg may have changed sizes\n        let width,height;\n        if(Object.keys(this.settings).indexOf(\"width\")>-1){\n            width =this. settings.width;\n        }else{\n            width = this.svg.getBoundingClientRect().width;\n        }\n        if(Object.keys(this.settings).indexOf(\"height\")>-1){\n            height =this. settings.height;\n        }else{\n            height = this.svg.getBoundingClientRect().height;\n        }\n        // update the scales' domains\n        this.scales.x.domain(this.layout.horizontalRange).range([this.margins.left, width - this.margins.right-this.margins.left]);\n        this.scales.y.domain(this.layout.verticalRange).range([height -this.margins.bottom-this.margins.top,this.margins.top]);\n        this.scales.width=width;\n        this.scales.height=height;\n\n        updateAxis.call(this);\n\n        if (this.settings.backgroundBorder > 0) {\n          updateRectBackgrounds.call(this);\n      }\n\n      updateRects.call(this);\n\n    }\n/**\n * Add a hover callback\n * @param {*} action  - object which has 2 functions enter and exit each takes 3 arguments d,i,n d is data n[i] is `this`\n * @param {*} selection  - what to select defaults to .rect class\n */\n  onHover(action,selection=null){\n      const selected = this.svgSelection.selectAll(`${selection ? selection : \".rect\"}`);\n      console.log(selected);\n      selected.on(\"mouseover\", (d,i,n) => {\n          action.enter(d,i,n);\n      });\n      selected.on(\"mouseout\", (d,i,n) => {\n          action.exit(d,i,n);\n      });\n  }\n\n  }\n    /**\n     * adds or updates rects\n     */\nfunction updateRects(){\n      const rectLayer = select(this.svg).select(\".rect-layer\");\n\n    // DATA JOIN\n    // Join new data with old elements, if any.\n      const rects = rectLayer.selectAll(\".rect\")\n                  .data(this.bins, (c) => `c_${c.data.id}`);\n    // ENTER\n    // Create new elements as needed.\n    const newRects = rects.enter()\n      .append(\"rect\")\n      .attr(\"id\", (v) => v.id)\n      .attr(\"class\", (v) => [\"rect\"].join(\" \")) // add attribute classes here\n      .attr(\"x\", d => this.scales.x(d.x0) + 1)\n      .attr(\"width\", d => Math.max(0, this.scales.x(d.x1) - this.scales.x(d.x0) - 1))\n      .attr(\"y\", d => this.scales.y(d.y1))\n      .attr(\"height\", d => this.scales.y(d.y0)- this.scales.y(d.y1));\n\n       // update the existing elements\n       rects\n        .transition()\n        .duration(this.settings.transitionDuration)\n        .attr(\"x\", d => this.scales.x(d.x0) + 1)\n        .attr(\"width\", d => Math.max(0, this.scales.x(d.x1) - this.scales.x(d.x0) - 1))\n        .attr(\"y\", d => this.scales.y(d.y1))\n        .attr(\"height\", d => this.scales.y(d.y0)- this.scales.y(d.y1));\n\n     // EXIT\n    // Remove old elements as needed.\n    rects.exit().remove();\n    }\nfunction updateRectBackgrounds(){\n  const rectBackgroundLayer = this.svgSelection.select(\".rect-background-layer\");\n      // DATA JOIN\n    // Join new data with old elements, if any.\n    const rects = rectBackgroundLayer.selectAll(\".rect-background\")\n    .data(this.bins, (c) => `cb_${c.data.id}`);\n    // ENTER\n    // Create new elements as needed.\n    const newRects = rects.enter()\n    .append(\"rect\")\n    .attr(\"id\", (v) => v.id)\n    .attr(\"class\", (v) => [\"rect-background\"].join(\" \")) // add attribute classes \n    .attr(\"x\", d => this.scales.x(d.x0) + 1)\n    .attr(\"width\", d => Math.max(0, this.scales.x(d.x1) - this.scales.x(d.x0) - 1))\n    .attr(\"y\", d => this.scales.y(d.y1))\n    .attr(\"height\", d => this.scales.y(d.y0)- this.scales.y(d.y1));\n\n    // update the existing elements\n    rects\n    .transition()\n    .duration(this.settings.transitionDuration)\n    .attr(\"x\", d => this.scales.x(d.x0) + 1)\n    .attr(\"width\", d => Math.max(0, this.scales.x(d.x1) - this.scales.x(d.x0) - 1))\n    .attr(\"y\", d => this.scales.y(d.y1))\n    .attr(\"height\", d => this.scales.y(d.y0)- this.scales.y(d.y1));\n\n    // EXIT\n    // Remove old elements as needed.\n    rects.exit().remove();\n\n}\nfunction addAxis(){\n  const axesLayer = this.svgSelection.select(\".axes-layer\");\n    axesLayer.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"id\", \"x-axis\")\n      .attr(\"transform\", `translate(0, ${this.scales.height - this.margins.bottom + 5})`)\n      .call(axisBottom(this.scales.x));\n\n      axesLayer.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"id\", \"y-axis\")\n        .attr(\"transform\", `translate(${this.margins.left },0)`)\n        .call(axisLeft(this.scales.y));\n    }\n    \n\n  function updateAxis(){\n          // update axis\n  \n      this.svgSelection.select(\"#x-axis\")\n        .call(axisBottom(this.scales.x))\n        .transition()\n        .duration(this.settings.transitionDuration)\n        .ease(easeLinear)\n        ;\n      \n      this.svgSelection.select(\"#y-axis\")\n      .attr(\"transform\", `translate(${this.margins.left.height },0)`)\n      .call(axisLeft(this.scales.y).ticks(5))\n        .transition()\n        .duration(this.settings.transitionDuration)\n        .ease(easeLinear)\n    }\n    \n  \n/** \n * StackedHisogram layout\n * settings \n */\nexport class stackedHistogramLayout{\n      static DEFAULT_SETTINGS() {\n        return {\n            groupingFunction:d=>1,\n            binnedFunction:d=>timeWeek.floor(d.symptomOnset),\n            keyToXFunction:{x0:d=>timeWeek(new Date(d.key)),x1: d=>timeWeek.offset(new Date(d.key),1)}\n            \n        };\n    }\n    /**\n     * The constuctor\n     * @param {*} data which will be binned and  grouped \n     * @param {*} settings functions that will bin and group (color) the data\n     *                    groupingFunction:d=>1 - given the data assign it a group for coloring\n     *                    binnedFunction:d=>timeWeek.floor(d.symptomOnset), - given the data point return category for binning will be used as key in d3.nest\n                          keyToXFunction:{x0:d=>timeWeek(new Date(d.key)), -given the key (from above) convert to x0 and x1 on axis.\n                                          x1: timeWeek.offset(new Date(d.key),1)\n     */\n  constructor(data,settings = { }){\n    this.settings = {...stackedHistogramLayout.DEFAULT_SETTINGS(), ...settings};\n    this.data = data;\n    // default ranges - these should be set in layout()\n    this._horizontalRange = [0.0, 1.0];\n    this._verticalRange = [1.0, 0];\n}\n  /**\n   * Layout the data. Given a bins array population the arrary with one entry per datapoint with x0,x1 positions and y0,y1\n   * This will stack the data from each bin ordered by group.\n   * @param {*} bins \n   */\n  layout(bins){\n            const dateBins = nest().key(d=>timeWeek.floor(d.symptomOnset))\n            .entries(this.data)\n            .map(d=>({\"x0\":timeWeek(new Date(d.key)),\"x1\":timeWeek.offset(new Date(d.key),1),\"values\":d.values}));    \n       \n       //get the keys used to group the data within each bin\n\n        const groupKeys= this.data.map(d=>this.settings.groupingFunction(d)).reduce((acc,curr) =>{\n                                            if(acc.indexOf(curr)===-1){\n                                                acc.push(curr)\n                                            };\n                                            return(acc)},[]);\n                                        \n        let currentCount=0;\n        let maxCount=0;\n        for(const time of dateBins){\n        currentCount=0;\n        for(const k of groupKeys){\n        const kEntry = time.values.filter(w=>this.settings.groupingFunction(w)===k);\n        const entry = {\"x0\":time.x0,\"x1\":time.x1,\"colorKey\":k}; // key is used for color\n        if(kEntry.length>0){\n        for(const data of kEntry){\n          const caseEntry = {...entry,...{\"data\":data}};\n          caseEntry.y0=currentCount;\n          caseEntry.y1=currentCount+1;\n          currentCount+=1;\n          bins.push(caseEntry);\n          }\n          }\n        }\n        maxCount=max([maxCount,currentCount])\n        }\n        this._horizontalRange = [min(dateBins,d=>d.x0),max(dateBins,d=>d.x1)];\n        this._verticalRange = [0,maxCount];\n      }\n      update() {\n        this.updateCallback();\n    }\n    get horizontalRange() {\n      return this._horizontalRange;\n  }\n\n  get verticalRange() {\n      return this._verticalRange;\n  }\n          \n  }\n\n","import React, {useCallback,useState} from 'react';\nimport {stackedHistogramChart, stackedHistogramLayout} from '../lib/charts/stackedHistogram';\nimport {select} from \"d3-selection\";\nfunction StackedHistogram(props){\n    const [histogram,setHistogram]=useState(null);\n    \n    const el = useCallback(node => {\n        \n        if (node !== null) {\n            if(node.children.length===0){ // make it the first time\n                const layout = new stackedHistogramLayout(props.data);\n                const margins = {\"top\":props.chartGeom.spaceTop,\"bottom\":10,\"left\":50,\"right\":50};\n                const settings = { hoverBorder: 4, backgroundBorder:0,transitionDuration:300};\n                const fig = new stackedHistogramChart(node,layout,margins,settings);\n                fig.draw();\n                const mouseEnter = (d, i, n)=>{select(n[i]).classed(\"hovered\", true);};\n                const mouseExit = (d,i,n) => {select(n[i]).classed(\"hovered\", false);};\n\n                const callback = {enter:mouseEnter,exit:mouseExit};\n                fig.onHover(callback)\n                select(node).select(\".axes-layer\").select(\"#x-axis\").remove();\n                setHistogram(fig);\n            }else{\n                histogram.update();\n            }\n        }\n    });\nconst rand_id = `b${Math.random().toString(36).substring(4)}`\n\n\n        return(\n            <svg className=\"chart\" id= {rand_id}\n            ref={el}\n            height={props.chartGeom.height}\n            width={props.chartGeom.width}\n        />);\n\n};\n\nexport default StackedHistogram;\n","import React, {useCallback,useState} from 'react';\nimport {TransmissionLayout, RectangularLayout, Tree} from 'figtree';\nimport { FigTree, CircleBauble } from 'figtree';\nimport {select} from 'd3-selection';\nimport {nest} from \"d3-collection\"\n\nfunction PhyloChart(props){\n    const [figtree,setFigtree]=useState(null);\n\n    const el = useCallback(node => {\n        \n        if (node !== null) {\n            if(node.children.length===0){ // make it the first time\n            // const attributes = nest().key(d=>d.id).entries(props.attributes[0]);\n            // const flattenedAttributes={};\n            // for(const entry of attributes){\n            //     // can't handle transmission key yet\n            //     delete entry.values[0].transmissions;\n            //     flattenedAttributes[entry.key]=entry.values[0] //should be just one node for each id;\n            // }\n\n\n            // props.phylogeny.annotateTips(flattenedAttributes);\n            const layout = new props.layout(props.phylogeny);\n            \n            const margins = {\"top\":props.chartGeom.spaceTop,\"bottom\":10,\"left\":10,\"right\":50};\n            const fig = new FigTree(node,layout,margins, { hoverBorder: 4, backgroundBorder:2,\n                baubles: [\n                    new CircleBauble(),\n                ],\n                transitionDuration:300\n            });\n            fig.draw();\n            fig.hilightInternalNodes();\n            fig.hilightExternalNodes();\n            fig.hilightBranches();\n            fig.onClickNode(d=>console.log(d))\n            select(node).select(\".axes-layer\").remove();\n            setFigtree(fig);\n\n        }else{\n            figtree.update();\n        }\n        }});\n        const rand_id = `b${Math.random().toString(36).substring(4)}`\n\n        // useEffect(()=>{\n        //     if(figtree!==null){\n        //         figtree.update()\n        //     }\n        // },[props.chartGeom,props.phylogeny])\n\n         return(\n                <svg className=\"chart\" id={rand_id}\n                ref={el}\n                height={props.chartGeom.height}\n                width={props.chartGeom.width}\n            />);\n         \n};\n\n\n\nexport default PhyloChart;","import React, { useEffect,useRef } from 'react';\nconst ObjectChart = React.forwardRef((props,ref)=>{\n\n    return (\n        <svg className=\"chart\"\n        ref={ref}\n        height={props.chartGeom.height}\n        width={props.chartGeom.width}\n    />);\n});\nexport default  ObjectChart;","import React, {useState,useCallback} from 'react';\nimport ObjectChart from \"./ObjectChart\";\nimport {ArcLayout,CircleBauble} from 'figtree';\nimport { FigTree } from 'figtree';\nimport {scaleTime} from \"d3-scale\";\nimport {select,selectAll} from 'd3-selection';\n\n\nfunction ArcTransmission(props){\n\n    const [figtree,setFigtree]=useState(null);\n    const xScale = scaleTime().domain([new Date(\"2018-08-29\"),new Date(\"2018-12-01\")]).range([0,1]); // pass in date domain\n    const xfunc=(n,i)=>n.id===\"UnsampledrootCase\"? xScale.range()[0]:xScale(n.symptomOnset) // for setting the x postion;\n\n    const el = useCallback(node => {\n        \n        if (node !== null) {\n            if(node.children.length===0){ // make it the first time\n                const layout = new ArcLayout(props.graph,{xFunction:xfunc,curve:props.curve});\n                const margins = {\"top\":props.chartGeom.spaceTop,\"bottom\":10,\"left\":10,\"right\":50};\n                const settings = { hoverBorder: 4, backgroundBorder:2,\n                    baubles: [\n                        new CircleBauble(),\n                    ],\n                    transitionDuration:300\n                };\n                const fig = new FigTree(node,layout,margins,settings);\n            fig.draw();\n            fig.hilightInternalNodes();\n            fig.hilightExternalNodes();\n            fig.hilightBranches();\n            select(node).select(\".axes-layer\").remove();\n            setFigtree(fig);\n    }else{\n        figtree.update();\n\n    }\n}});\nconst rand_id = `b${Math.random().toString(36).substring(4)}`\n\n\n        return(\n            <svg className=\"chart\" id= {rand_id}\n            ref={el}\n            height={props.chartGeom.height}\n            width={props.chartGeom.width}\n        />);\n\n};\n\n\n\n\nexport default ArcTransmission;","import React, {useState,useCallback,useEffect} from 'react';\nimport {csv} from \"d3-fetch\";\nimport Case from \"../lib/outbreak/Case\";\nimport Link from \"../lib/outbreak/Link\";\nimport {dateParse} from \"../utils/commonFunctions\"\nimport {scaleTime,scaleLinear} from 'd3-scale';\nimport {timeWeek,timeYear} from \"d3-time\";\nimport {max,min,extent} from \"d3-array\";\nimport {nest} from \"d3-collection\";\nimport { Graph, RectangularLayout, TransmissionLayout } from 'figtree';\nimport StackedHistogram from './StackedHistogram';\n// import ArcTransmission from \"./ArcTransmission\";\nimport PhyloChart from './PhyloChart';\nimport {Tree} from \"figtree\";\nimport ArcTransmission from './ArcTransmission';\nimport TimeAxis from './TimeAxis';\n\n\nfunction ChartContainer(props){\n  \n    const prefix = process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://raw.githubusercontent.com/jtmccr1/trapper/master/src';\n    \n    //------------ Data processing ------------------------\n\n    // hardcoding in data processing - magic number\n\n      const [ogLineList,setOgLineList]=useState(null);\n      const [ogLinks,setOgLinks] = useState(null)\n      const [scales,setScales]=useState(null);\n      const [chartGeom,setChartGeom]=useState(null);\n      const [domRect,setDomRect]=useState(null);\n      const [outbreakGraph,setOutbreakGraph] = useState(null);\n      const [phylogeny,setPhylogeny] = useState(null);\n      const [phyloAttributes,setPhyloAttributes]=useState(null);\n      const [dateRange,setDateRange] = useState(null)\n\n\n    //Get lineList\n    useEffect(()=>{\n        csv(`${prefix}/examples/simulated/lineList.csv`,\n        d=>{\n            const dataPoint = {\n                   id:d.id,\n                   symptomOnset:dateParse(d.symptomOnset),\n                   sampleDate:[dateParse(d.sampleDate)],\n                   location:d.Location,\n                   resolution:d.Outcome,\n                }\n            return new Case(dataPoint);\n          }).then(data=>{\n            setOgLineList(data)\n          });\n    },[]);// [] only run on first render otherwise we get an infinite loop.\n       //Get links TODO get all links\n       useEffect(()=>{\n        Promise.all([csv(`${prefix}/examples/simulated/transphyloLinks.csv`,\n                        d=>{\n                            const dataPoint = {\n                                  target:d.target,\n                                  source:d.source,\n                                  dataSource:d.dataSource\n                                }\n                            return new Link(dataPoint);\n                              }),\n                              csv(`${prefix}/examples/simulated/epiContacts.csv`,\n                              d=>{\n                                  const dataPoint = {\n                                        target:d.target,\n                                        source:d.source,\n                                        dataSource:d.dataSource\n                                      }\n                                  return new Link(dataPoint);\n                                    })\n                                  ]).then(([data1,data2])=>setOgLinks([...data1,...data2]));\n                        },[]);\n\n      useEffect(()=>{\n        fetch(`${prefix}/examples/simulated/simulated.trees`)\n        .then(response=>response.text()\n                .then(text=>{\n                  setPhylogeny(Tree.parseNewick(text));\n                }));\n        fetch(`${prefix}/examples/simulated/simulated.json`)\n                .then(response=>response.json()\n                        .then(json=>{\n                          setPhyloAttributes(json)\n                        })); \n      },[])\n\n\n    //Summarize links for each target for each type get % of incoming links with this source\n    // [graph,setGraph] = useState(null)\n    \n    useEffect(()=>{\n      if(ogLinks!=null){\n            // link is an object keyed by target each \n            // the output should be \n            // {target, source, dataSource:, metadata:{source1:{ support: %\n            //   links:[links]}[links] source2:linkes}}\n            const nestLinks = nest()\n            .key(d=>d.target)\n            .key(d=>d.source)\n            .key(d=>d.dataSource)\n            .entries(ogLinks)\n\n            const dataSources= [];\n            ogLinks.forEach(l => {\n              dataSources.indexOf(l.dataSource)===-1 && dataSources.push(l.dataSource);\n            });\n\n            const links =[];\n            for(const l of nestLinks){\n              const target = l.key;\n              const totalObservations ={};\n              for(const ds of dataSources){\n                totalObservations[ds] = l.values.map(s=>s.values.filter(d=>d.key==ds)) // array of array of {key:soures, value:data} with an entry for each source\n                                    .reduce((acc,curr)=>{  // flatten array above\n                                      return acc.concat(curr)\n                                    },[])\n                                    .reduce((acc,curr)=>acc+curr.values.length,0); // sum number of data points \n                                            // .reduce((acc,curr)=>acc+curr.values.length,0)));\n              }\n                for(const s of l.values){\n                  const source = s.key;\n                  const metaData=dataSources.reduce((acc,curr)=>{\n                          acc[curr]={support:null,data:[]};\n                          return(acc)\n                        },{})\n                  for(const ds of s.values){\n                    metaData[ds.key].data=ds.values;\n                    metaData[ds.key].support=totalObservations[ds.key]!==0? ds.values.length/totalObservations[ds.key]: null;\n                  }\n                  links.push({\"target\":target,\"source\":source,\"metaData\":metaData})\n                }\n        \n              }\n              // Add any sources that aren't included \n              const sources =  links.map(l=>l.source).reduce((acc,curr)=>{\n                                                      if(acc.indexOf(curr)===-1){\n                                                        return(acc.concat(curr));\n                                                      }\n                                                      return(acc);\n                                                    },[]);\n              const cases = [...ogLineList];\n              for(const source of sources){\n                if(cases.filter(d=>d.id===source).length===0){\n                  const newCase = new Case({\"id\":source});\n                  cases.push(newCase);\n                }\n              }\n              \n              setOutbreakGraph(new Graph(cases,links));\n            }\n    },[ogLinks,ogLineList]);\n\n\n\n    //update scale \n    useEffect(()=>{\n        // epi start and stop week;\n        if(ogLineList!==null&&chartGeom!==null){\n        const startWeek= timeWeek(min(ogLineList,d=>timeWeek(d.getSymptomOnset())));\n        const endWeek = timeWeek(max(ogLineList,d=>timeWeek(d.getSymptomOnset())));\n        const scales={\n            x:scaleTime().domain([timeWeek.offset(startWeek,-1),timeWeek.offset(endWeek,2)]).range([chartGeom.spaceLeft,(chartGeom.width-chartGeom.spaceRight)]),\n            y:scaleLinear().domain([0,1]).range([(chartGeom.height - chartGeom.spaceBottom), chartGeom.spaceTop]),\n        }\n        // scales.x.ticks(timeWeek.range(scales.x.domain()[0],scales.x.domain()[1]));\n        scales.weeks=timeWeek.range(scales.x.domain()[0],timeWeek.offset(scales.x.domain()[1],1))\n        setScales(scales);\n    };\n    },[ogLineList,chartGeom]);\n\n    //Update chart sizes\n    useEffect(()=>{\n        if(domRect!==null){\n        const margins={\"spaceTop\":5,\"spaceBottom\":20,\"spaceLeft\":60,\"spaceRight\":60};\n        const parentBaseDim={\"height\":max([domRect.height*0.25,50]),\"width\":max([domRect.width*0.9,50])};\n        setChartGeom({...margins,...parentBaseDim})\n        }\n    },[domRect]);\n    // Set the date scale\n\n    useEffect(()=>{\n      if(phylogeny!==null&&outbreakGraph!==null){\n        //get date range of case\n        const casesRange = extent(outbreakGraph.nodes,d=>d.symptomOnset);\n        const treeMaxTipLength = max(phylogeny.nodes,n=>phylogeny.rootToTipLength(n));\n        const treeMaxTip = phylogeny.nodes.find(n=>phylogeny.rootToTipLength(n)===treeMaxTipLength);\n        const treeMaxDate = outbreakGraph.getNode(treeMaxTip.name).getSymptomOnset(); // names must match case id's in line list;\n        const treeRootDate = timeYear.offset(treeMaxDate,-1*phylogeny.rootToTipLength(phylogeny.rootNode));\n        setDateRange(extent([treeRootDate,...casesRange]));\n      }\n    },[ogLineList,outbreakGraph])\n\n    //Getting the size of the container to pass to children\n    const measuredRef = useCallback(node => {\n        if (node !== null) {\n            setDomRect({\"height\":node.getBoundingClientRect().height,\"width\":node.getBoundingClientRect().width})\n            const handleResize = () =>  {\n                setDomRect({\"height\":node.getBoundingClientRect().height,\"width\":node.getBoundingClientRect().width});\n            }\n            window.addEventListener('resize', handleResize);\n            return () => {\n              window.removeEventListener('resize', handleResize);\n            };\n        }\n      },[]);\n\n      //Ensure we don't render before we have scales ect.\n      const isFull = Object.values([ogLineList,ogLinks,scales,chartGeom,outbreakGraph,phylogeny,phyloAttributes,dateRange])\n      .every(x => (x !== null & x !== ''));\n      if(!isFull){\n        return(\n          <div className = \"timelineContainer\" ref={measuredRef}>\n          </div>\n          )\n      }else{\n      return(\n       <div className = \"timelineContainer\" ref={measuredRef}>\n        <div className = \"chartContainer\">\n          <StackedHistogram  data={ogLineList} \n            scales = {scales} \n            chartGeom={chartGeom}\n            callbacks={{groups:d=>d.location}}/>\n          </div>  \n          <div className = \"chartContainer\">\n          <ArcTransmission  \n          graph={outbreakGraph} \n          scales = {scales} \n          curve ={\"bezier\"}\n          chartGeom={chartGeom}/>\n        </div>  \n        {/*<TimeAxis domain={dateRange} chartGeom={chartGeom}/> */}\n        <div className = \"chartContainer\">\n        <ArcTransmission\n        graph={outbreakGraph} \n        scales = {scales} \n        curve = {\"arc\"}\n        chartGeom={chartGeom}/>\n      </div>  \n      <div className = \"chartContainer\">\n          <PhyloChart  \n          phylogeny={phylogeny} \n          layout = {TransmissionLayout}\n          attributes = {phyloAttributes}\n          scales = {scales} \n          chartGeom={chartGeom}/>\n      </div>  \n      <div className = \"chartContainer\">\n      <PhyloChart  \n      phylogeny={phylogeny} \n      layout = {RectangularLayout}\n      attributes = {phyloAttributes}\n      scales = {scales} \n      chartGeom={chartGeom}/>\n  </div> \n</div>\n)}\n    // <Chart  />\n}\n\nexport default  ChartContainer;\n","import React from 'react';\nimport Header from './Header';\nimport ChartContainer from './ChartContainer';\nimport \"../styles/trapper.css\"\n\nfunction App() {\n\t\treturn(\n\t\t\t<div className=\"App\">\n\t\t\t<Header />\n\t\t\t<ChartContainer />\n\t\t\t</div>\n\t\t\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}